{ "name": "CFML",
  "uuid": "3e71b4ef-e4d0-44d7-9810-f7e17472c5dd",
  "scopeName": "source.cfml",
  "fileTypes": ["cfm","cfml","cfc"],

  "patterns": [
    { "include": "#comment" },
    {
      "name": "entity.tag.script.cfml",
      "contentName": "meta.script",
      "begin": "(?i)<cfscript>",
      "end": "(?i)</cfscript>",
      "patterns": [
        { "include": "#script" }
      ]
    },
    {
      "name": "entity.tag.if.cfml",
      "begin": "(?i)<cfif",
      "end": ">",
      "patterns": [
        { "include": "#expression" }
      ]
    },
    {
      "name": "source.sql",
      "begin": "(?i)(<cfquery)",
      "end": "(?i)(</cfquery>)",
      "beginCaptures": {
        "1": { "name": "entity.tag.query.cfml" }
      },
      "endCaptures": {
        "1": { "name": "entity.tag.query.cfml" }
      },
      "patterns": [
        {"include": "#attributeandendoftag"},
        {"include": "#cfsql"}
      ]
    },
    {
      "name": "source.sql",
      "begin": "(?i)(<cf_sql)",
      "end": "(?i)(</cf_sql>)",
      "beginCaptures": {
        "1": { "name": "entity.tag.sql.cfml" }
      },
      "endCaptures": {
        "1": { "name": "entity.tag.sql.cfml" }
      },
      "patterns": [
        {"include": "#attributeandendoftag"},
        {"include": "#cfsql"}
      ]
    },
    {
      "name": "markup.text",
      "begin": "(?i)(<cfoutput>)",
      "end": "(?i)(</cfoutput>)",
      "beginCaptures": {
        "1": { "name": "entity.tag.output.cfml" }
      },
      "endCaptures": {
        "1": { "name": "entity.tag.output.cfml" }
      },
      "patterns": [
        { "include": "#inlineexpression" },
        { "include": "$self" }
      ]
    },
    
    {
      "name": "entity.tag.set.cfml",
      "begin": "(?i)<cfset(?=[^>]*>)",
      "end": ">",
      "patterns": [
        { "include": "#script" }
      ]
    },
    
    {
      "name": "entity.tag.cfml",
      "begin": "(?i)<cf",
      "end": ">",
      "patterns": [{ "include": "#attribute" }]
    },
    {
      "name": "entity.tag.cfml",
      "begin": "(?i)</cf",
      "end": ">"
    }
  ],

  "repository": {
    "comment": {
       "name": "comment.block.cfml",
       "begin": "<!---",
       "end": "--->",
       "patterns": [{ "include": "#comment" }]
    },
    "inlineexpression": {
      "name": "string.quoted.interpolated.cfml",
      "begin": "#",
      "end": "#"
    },
    "cfsql": {
      "name": "meta.script.line.sql",
      "patterns": [
        {"include": "$self"},
        {"include": "#sqlcomment"},
        {"include": "#sqlstring"},
        {"include": "#sql"}
      ]
    },
    "expression": {
      "name": "string.interpolated",
      "patterns": [
        { "include": "#string" },
        { "include": "#cfkeywords" },
        { "include": "#cffunctions" },
        { "include": "#cfscopes" }
      ]
    },
    "string": {
      "name": "string.quoted.double",
      "begin": "\\s*\"",
      "end": "\"",
      "patterns": [
        { "include": "#inlineexpression" }
      ]
    },
    "cfkeywords": {
      "name": "keyword.script.cfml",
      "match": "(?i)\\b(var|and|or|does|not|contain|eg|lt|gt|lte|gte|neq)\\b"
    },
    "cfscopes": {
      "name": "keyword.script.cfml",
      "match": "(?i)\\b(request|variables|local|this|super|cgi|form|url|attributes|application|server|session|arguments|caller|client|cookie|flash|thistag|thread)\\."
    },
    "cffunctions": {
      "name": "keyword.script.cfml",
      "begin": "(?i)\\b(abs|acos|addsoaprequestheader|addsoapresponseheader|arrayappend|arrayavg|arrayclear|arraydeleteat|arrayinsertat|arrayisempty|arraylen|arraymax|arraymin|arraynew|arrayprepend|arrayresize|arrayset|arraysort|arraysum|arrayswap|arraytolist|asc|asin|atn|binarydecode|binaryencode|bitand|bitmaskclear|bitmaskread|bitmaskset|bitnot|bitor|bitshln|bitshrn|bitxor|ceiling|charsetdecode|charsetencode|chr|cjustify|compare|comparenocase|cos|createdate|createdatetime|createobject|createobject|createobject|createobject|createobject|createodbcdate|createodbcdatetime|createodbctime|createtime|createtimespan|createuuid|dateadd|datecompare|dateconvert|datediff|dateformat|datepart|day|dayofweek|dayofweekasstring|dayofyear|daysinmonth|daysinyear|de|decimalformat|decrementvalue|decrypt|decryptbinary|deleteclientvariable|directoryexists|dollarformat|duplicate|encrypt|encryptbinary|evaluate|exp|expandpath|fileexists|find|findnocase|findoneof|firstdayofmonth|fix|formatbasen|generatesecretkey|getauthuser|getbasetagdata|getbasetaglist|getbasetemplatepath|getclientvariableslist|getcontextroot|getcurrenttemplatepath|getdirectoryfrompath|getencoding|getexception|getfilefrompath|getfunctionlist|getgatewayhelper|gethttprequestdata|gethttptimestring|getk2serverdoccount|getk2serverdoccountlimit|getlocale|getlocaledisplayname|getlocalhostip|getmetadata|getmetricdata|getpagecontext|getprofilesections|getprofilestring|getsoaprequest|getsoaprequestheader|getsoapresponse|getsoapresponseheader|gettempdirectory|gettempfile|gettemplatepath|gettickcount|gettimezoneinfo|gettoken|hash|hour|htmlcodeformat|htmleditformat|iif|incrementvalue|inputbasen|insert|int|isarray|isbinary|isboolean|iscustomfunction|isdate|isdebugmode|isdefined|isk2serverabroker|isk2serverdoccountexceeded|isk2serveronline|isleapyear|islocalhost|isnumeric|isnumericdate|isobject|isquery|issimplevalue|issoaprequest|isstruct|isuserinrole|isvalid|isvalid|isvalid|iswddx|isxml|isxmlattribute|isxmldoc|isxmlelem|isxmlnode|isxmlroot|javacast|jsstringformat|lcase|left|len|listappend|listchangedelims|listcontains|listcontainsnocase|listdeleteat|listfind|listfindnocase|listfirst|listgetat|listinsertat|listlast|listlen|listprepend|listqualify|listrest|listsetat|listsort|listtoarray|listvaluecount|listvaluecountnocase|ljustify|log|log10|lscurrencyformat|lsdateformat|lseurocurrencyformat|lsiscurrency|lsisdate|lsisnumeric|lsnumberformat|lsparsecurrency|lsparsedatetime|lsparseeurocurrency|lsparsenumber|lstimeformat|ltrim|max|mid|min|minute|month|monthasstring|now|numberformat|paragraphformat|parameterexists|parsedatetime|pi|preservesinglequotes|quarter|queryaddcolumn|queryaddrow|querynew|querysetcell|quotedvaluelist|rand|randomize|randrange|refind|refindnocase|releasecomobject|removechars|repeatstring|replace|replacelist|replacenocase|rereplace|rereplacenocase|reverse|right|rjustify|round|rtrim|second|sendgatewaymessage|setencoding|setlocale|setprofilestring|setvariable|sgn|sin|spanexcluding|spanincluding|sqr|stripcr|structappend|structclear|structcopy|structcount|structdelete|structfind|structfindkey|structfindvalue|structget|structinsert|structisempty|structkeyarray|structkeyexists|structkeylist|structnew|structsort|structupdate|tan|timeformat|tobase64|tobinary|toscript|tostring|trim|ucase|urldecode|urlencodedformat|urlsessionformat|val|valuelist|week|wrap|writeoutput|xmlchildpos|xmlelemnew|xmlformat|xmlgetnodetype|xmlnew|xmlparse|xmlsearch|xmltransform|xmlvalidate|year|yesnoformat)\\(",
      "end": "\\)",
      "patterns": [{ "include": "#expression" }]
    },
    "script": {
      "name": "meta.script.line.cfml",
      "patterns": [{ "include": "#expression" }]
    },
    "attributeandendoftag": {
      "name": "entity.tag.cfml",
      "begin": "(?=[^>]*>)",
      "end": ">",
      "patterns": [
        { "include": "#attribute" }
      ]
    },
    "attribute": {
      "patterns": [
        { "include": "#attributeName" },
        { "include": "#attributeValue" }
      ] 
    },
    "attributeName": {
      "name": "markup.text",
      "match": "(?i)([^\\s=]+)\\s*(=)\\s*(?=\"[^\"]*\")",
      "captures": {
        "1": { "name": "entity.other.attribute-name" },
        "2": { "name": "operator" },
        "3": { "name": "string.quoted.double"}
      }
    },
    "attributeValue": {
      "name": "string.quoted.double",
      "begin": "\\s*\"",
      "end": "\"",
      "patterns": [
        { "include": "#inlineexpression" }
      ]
    },
    "sqlcomment": {
      "name": "comment.line.double-dash.sql",
      "match": "(--).*$\n?"
    },
    "sqlstring": {
      "name": "string.quoted.single.sql",
      "match": "(')[^\\']*(')"
    },
    "sql": {
      "name": "keyword.other.sql",
      "match": "(?i)\\b(select|update|delete|from|where|order\\s+by|group\\s+by|insert|inner\\s+join|outer\\s+join||left\\s+outer\\s+join||left\\s+join||right\\s+outer\\s+join||right\\s+join|join|on|and|or|into|values|set|begin|end|create|table|if|not|exists|null|as|default|collate|exec|in|alter|add|constraint|with|primary|key|clustered)\\b"
    }
  }
}